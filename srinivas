# makeCacheMatrix takes a matrix, saves it in the private variable x
# The return value of the makeCacheMatrix function is a list of functions that we want to expose as public.  
# These are accessed with the $ operator. 
# Any variables declared inside makeVector but not exported remain private

makeCacheMatrix <- function(x = matrix()) {
  inverse <- NULL
  set <- function(y){
    x <<- y
    inverse <<- NULL
  }
  get <- function() x
  setinverse <- function(inverse) inverse <<- inverse
  getinverse <- function() inverse
  list(set=set, get=get, setinverse = setinverse, getinverse = getinverse)
}


# cacheSolve takes a caching matrix created with makeCacheMatrix and
# return the cached Inverse vector.

cacheSolve <- function(x, ...) {
  #Return a matrix that is the inverse of 'x'
  m <- x$getinverse()
  #If the Inverse already exists, then cache it back
  if(!is.null(m)) {
    message("Getting cached data")
    return(m)
  }
  data <- x$get()
  m <- solve(data, ...)
  x$setinverse(m)
  m
}
